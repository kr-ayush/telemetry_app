networks:
  telemetry-network:
    driver: bridge

volumes:
  certs:
    driver: local

services:
  elasticsearch:
    build:
      context: ./elasticsearch
      dockerfile: Dockerfile
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTIC_PASSWORD=pass123
      - node.name=elasticsearch
      - path.logs=/var/log/
      - cluster.name=elasticsearch
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - logger.level=error
    ports:
      - "9200:9200"
    networks:
      - telemetry-network
    healthcheck:
      test: curl -k -u elastic:pass123 http://localhost:9200/_cluster/health || exit 1
      interval: 10s
      retries: 10

  bootstrap:
    image: ubuntu:20.04
    container_name: bootstrap
    volumes:
      - ./bootstrap.sh:/usr/local/bin/bootstrap.sh
    entrypoint: ["/bin/bash", "/usr/local/bin/bootstrap.sh"]
    networks:
      - telemetry-network
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana:
    build:
      context: ./kibana
      dockerfile: Dockerfile
    container_name: kibana
    ports:
      - "5601:5601"
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml
    networks:
      - telemetry-network
    # healthcheck:
    #   test: curl -s http://localhost:5601 || exit 1
    #   interval: 10s
    #   # timeout: 10s
    #   retries: 25
    depends_on:
      elasticsearch:
        condition: service_healthy

  apm-server:
    build:
      context: ./apm-server
      dockerfile: Dockerfile
    container_name: apm-server
    command: >
      apm-server -e
        -E apm-server.host=0.0.0.0:8200
        -E apm-server.rum.enabled=true
        -E setup.template.enabled=true
        -E setup.template.overwrite=true
        -E setup.template.settings.index.number_of_replicas=0
        -E output.elasticsearch.hosts=["http://elasticsearch:9200"]
        -E output.elasticsearch.username=elastic
        -E output.elasticsearch.password=pass123
        -E output.elasticsearch.protocol=http
        -E output.elasticsearch.ssl.enabled=false
    ports:
      - "8200:8200"
    networks:
      - telemetry-network
    healthcheck:
      test: curl -s http://localhost:8200 || exit 1
      interval: 1s
      timeout: 10s
      retries: 5
    depends_on:
      elasticsearch:
        condition: service_healthy

  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
      - "13133:13133" # Health check extension
    networks:
      - telemetry-network
    depends_on:
      apm-server:
        condition: service_healthy

  server:
    build: ./server
    container_name: async_server
    environment:
      - OTEL_SERVICE_NAME=async_server
      - OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true
      - OTEL_TRACES_EXPORTER=otlp,console
      - OTEL_METRICS_EXPORTER=otlp,console
      - OTEL_LOGS_EXPORTER=otlp,console
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_TRACES_INSECURE=true
      - OTEL_EXPORTER_OTLP_METRICS_INSECURE=true
      - OTEL_EXPORTER_OTLP_LOGS_INSECURE=true
    ports:
      - "8000:8000"
    networks:
      - telemetry-network
